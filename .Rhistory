write.csv(dfIdOrderAndSkuAccessories, "/Users/k-owl/Documents/code/DataScience/R/RecommenderSystem/categories/dfIdOrderAndSkuAccessories.csv")
#write csv and create transactions file for accessories
write.csv(dfIdOrderAndSkuAccessories, "/Users/k-owl/Documents/code/DataScience/R/RecommenderSystem/categories/dfIdOrderAndSkuAccessories.csv")
dfIdOrderAndSkuBrandFilt <- itemOrdersFiltByBrand[c('id_order', 'sku', 'name_en')]
groupByBrand <- itemOrders %>%
group_by(brand) %>%
summarize(count=n())
filteredBrandGroups <- groupByBrand %>% filter(count >1000)
filteredBrandGroups %>% ggplot(aes(brand, count)) + geom_col()
itemOrdersFiltByBrand <- itemOrders %>%
filter(brand %in% c("Apple", "Crucial", "Belkin", "iFixit", "LaCie", "NewerTech", "OWC", "Pack", "SanDisk", "Satechi", "Wacom", "Western Digital"))
dfIdOrderAndSkuBrandFilt <- itemOrdersFiltByBrand[c('id_order', 'sku', 'name_en')]
#write csv and create transactions file
write.csv(dfIdOrderAndSkuBrandFilt, "/Users/k-owl/Documents/code/DataScience/R/RecommenderSystem/idOrderAndSkuBrandFilt.csv")
#write csv and create transactions file
write.csv(dfIdOrderAndSkuBrandFilt, "/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/idOrderAndSkuBrandFilt.csv")
idOrderAndSkuBrandFilt <- read.transactions("/Users/k-owlthekasra/Documents/Code/RStudio/RecommenderSystem/idOrderAndSkuBrandFilt.csv",
format = 'single',
sep = ',',
header = TRUE,
cols= c('id_order', 'name_en'))
#plot frequency and calculate apriori
itemFrequencyPlot(idOrderAndSkuBrandFilt, top = 20, support = 0.005, cex.names = .7)
idOrderAndSkuBrandFilt <- read.transactions("/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/idOrderAndSkuBrandFilt.csv",
format = 'single',
sep = ',',
header = TRUE,
cols= c('id_order', 'name_en'))
#plot frequency and calculate apriori
itemFrequencyPlot(idOrderAndSkuBrandFilt, top = 20, support = 0.005, cex.names = .7)
rulesBrandFilt <- apriori (idOrderAndSkuBrandFilt, parameter = list(supp = 0.0004, conf = .005, minlen = 2))
inspect(rulesBrandFilt)
rulesBrandFilt <- apriori (idOrderAndSkuBrandFilt, parameter = list(supp = 0.0004, conf = .005, minlen = 3))
2
rulesBrandFilt <- apriori (idOrderAndSkuBrandFilt, parameter = list(supp = 0.0004, conf = .005, minlen = 2))
inspect(rulesBrandFilt)
supportLevels <- c(0.0009, 0.0007, 0.0005, 0.0003)
confidenceLevels <- c(0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1)
for (s in 1:length(supportLevels)) {
# Apriori algorithm with a support level of 0.09%
for (i in 1:length(confidenceLevels)) {
rulesMat[s, i] <- length(apriori(idOrderAndSkuBrandFilt,
parameter = list(sup = supportLevels[s],
conf = confidenceLevels[i],
target = "rules")))
}
}
rulesMat <- matrix(nrow=length(supportLevels), ncol=length(confidenceLevels))
for (s in 1:length(supportLevels)) {
# Apriori algorithm with a support level of 0.09%
for (i in 1:length(confidenceLevels)) {
rulesMat[s, i] <- length(apriori(idOrderAndSkuBrandFilt,
parameter = list(sup = supportLevels[s],
conf = confidenceLevels[i],
target = "rules")))
}
}
num_rules <- data.frame(rulesMat[1,],
rulesMat[2,],
rulesMat[3,],
rulesMat[4,],
confidenceLevels)
# Number of rules found with a support level of 0.09%, 0.07%, 0.05% and 0.03%
ggplot(data = num_rules, aes(x = confidenceLevels)) +
# Plot line and points (support level of 0.09%)
geom_line(aes(y = rulesMat[1,], colour = "Support level of 0.09%")) +
geom_point(aes(y = rulesMat[1,], colour = "Support level of 0.09%")) +
# Plot line and points (support level of 0.07%)
geom_line(aes(y = rulesMat[2,], colour = "Support level of 0.07%")) +
geom_point(aes(y = rulesMat[2,], colour = "Support level of 0.07%")) +
# Plot line and points (support level of 0.05%)
geom_line(aes(y = rulesMat[3,], colour = "Support level of 0.05%")) +
geom_point(aes(y = rulesMat[3,], colour = "Support level of 0.05%")) +
# Plot line and points (support level of 0.03%)
geom_line(aes(y = rulesMat[4,], colour = "Support level of 0.03%")) +
geom_point(aes(y = rulesMat[4,], colour = "Support level of 0.03%")) +
# Labs and theme
labs(x = "Confidence levels", y = "Number of rules found",
title = "Apriori algorithm with different support levels") +
theme_bw() +
theme(legend.title=element_blank())
idOrderAndSkuAccessories <- read.transactions("/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/idOrderAndSkuAccessories.csv",
format = 'single',
sep = ',',
header = TRUE,
cols= c('id_order', 'name_en'))
#plot frequency and calculate apriori
itemFrequencyPlot(idOrderAndSkuBrandFilt, top = 20, support = 0.005, cex.names = .7)
for (s in 1:length(supportLevels)) {
# Apriori algorithm with a support level of 0.09%
for (i in 1:length(confidenceLevels)) {
rulesMat[s, i] <- length(apriori(idOrderAndSkuAccessories,
parameter = list(sup = supportLevels[s],
conf = confidenceLevels[i],
target = "rules")))
}
}
num_rules <- data.frame(rulesMat[1,],
rulesMat[2,],
rulesMat[3,],
rulesMat[4,],
confidenceLevels)
# Number of rules found with a support level of 0.09%, 0.07%, 0.05% and 0.03%
ggplot(data = num_rules, aes(x = confidenceLevels)) +
# Plot line and points (support level of 0.09%)
geom_line(aes(y = rulesMat[1,], colour = "Support level of 0.09%")) +
geom_point(aes(y = rulesMat[1,], colour = "Support level of 0.09%")) +
# Plot line and points (support level of 0.07%)
geom_line(aes(y = rulesMat[2,], colour = "Support level of 0.07%")) +
geom_point(aes(y = rulesMat[2,], colour = "Support level of 0.07%")) +
# Plot line and points (support level of 0.05%)
geom_line(aes(y = rulesMat[3,], colour = "Support level of 0.05%")) +
geom_point(aes(y = rulesMat[3,], colour = "Support level of 0.05%")) +
# Plot line and points (support level of 0.03%)
geom_line(aes(y = rulesMat[4,], colour = "Support level of 0.03%")) +
geom_point(aes(y = rulesMat[4,], colour = "Support level of 0.03%")) +
# Labs and theme
labs(x = "Confidence levels", y = "Number of rules found",
title = "Apriori algorithm with different support levels") +
theme_bw() +
theme(legend.title=element_blank())
dfIdOrderAndSkuAccessories <- accessories[c('id_order', 'sku', 'name_en')]
#write csv and create transactions file for accessories
write.csv(dfIdOrderAndSkuAccessories, "/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/dfIdOrderAndSkuAccessories.csv")
idOrderAndSkuAccessories <- read.transactions("/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/idOrderAndSkuAccessories.csv",
format = 'single',
sep = ',',
header = TRUE,
cols= c('id_order', 'name_en'))
#write csv and create transactions file for accessories
write.csv(dfIdOrderAndSkuAccessories, "/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/dfIdOrderAndSkuAccessories.csv")
idOrderAndSkuAccessories <- read.transactions("/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/idOrderAndSkuAccessories.csv",
format = 'single',
sep = ',',
header = TRUE,
cols= c('id_order', 'name_en'))
dfIdOrderAndSku <- itemOrders[c('id_order', 'sku', 'name_en')]
#write the dataframe to a csv file
write.csv(dfIdOrderAndSku, "/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/idOrderAndSku.csv")
#create transactions file from csv file
idOrderAndSku <- read.transactions("/Users/k-owl/Documents/code/DataScience/R/RecommenderSystem/idOrderAndSku.csv",
format = 'single',
sep = ',',
header = TRUE,
cols= c('id_order', 'name_en'))
#create rules with the apriori function
rules <- apriori (idOrderAndSku, parameter = list(supp = 0.0004, conf = .005, minlen = 2))
#create rules with the apriori function
rules <- apriori (idOrderAndSku, parameter = list(supp = 0.0004, conf = .005, minlen = 2))
#create transactions file from csv file
idOrderAndSku <- read.transactions("/Users/k-owl/Documents/code/DataScience/R/RecommenderSystem/idOrderAndSku.csv",
format = 'single',
sep = ',',
header = TRUE,
cols= c('id_order', 'name_en'))
idOrderAndSkuBrandFilt <- read.transactions("/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/idOrderAndSkuBrandFilt.csv",
format = 'single',
sep = ',',
header = TRUE,
cols= c('id_order', 'name_en'))
#create transactions file from csv file
idOrderAndSku <- read.transactions("/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/idOrderAndSku.csv",
format = 'single',
sep = ',',
header = TRUE,
cols= c('id_order', 'name_en'))
#create rules with the apriori function
rules <- apriori (idOrderAndSku, parameter = list(supp = 0.0004, conf = .005, minlen = 2))
inspect(rules)
for (s in 1:length(supportLevels)) {
# Apriori algorithm with a support level of 0.09%
for (i in 1:length(confidenceLevels)) {
rulesMat[s, i] <- length(apriori(idOrderAndSku,
parameter = list(sup = supportLevels[s],
conf = confidenceLevels[i],
minlen = 2,
target = "rules")))
}
}
num_rules <- data.frame(rulesMat[1,],
rulesMat[2,],
rulesMat[3,],
rulesMat[4,],
confidenceLevels)
# Number of rules found with a support level of 0.09%, 0.07%, 0.05% and 0.03%
ggplot(data = num_rules, aes(x = confidenceLevels)) +
# Plot line and points (support level of 0.09%)
geom_line(aes(y = rulesMat[1,], colour = "Support level of 0.09%")) +
geom_point(aes(y = rulesMat[1,], colour = "Support level of 0.09%")) +
# Plot line and points (support level of 0.07%)
geom_line(aes(y = rulesMat[2,], colour = "Support level of 0.07%")) +
geom_point(aes(y = rulesMat[2,], colour = "Support level of 0.07%")) +
# Plot line and points (support level of 0.05%)
geom_line(aes(y = rulesMat[3,], colour = "Support level of 0.05%")) +
geom_point(aes(y = rulesMat[3,], colour = "Support level of 0.05%")) +
# Plot line and points (support level of 0.03%)
geom_line(aes(y = rulesMat[4,], colour = "Support level of 0.03%")) +
geom_point(aes(y = rulesMat[4,], colour = "Support level of 0.03%")) +
# Labs and theme
labs(x = "Confidence levels", y = "Number of rules found",
title = "Apriori algorithm with different support levels") +
theme_bw() +
theme(legend.title=element_blank())
#plot frequency and calculate apriori
itemFrequencyPlot(idOrderAndSkuAccessories, top = 20, support = 0.005, cex.names = .7)
idOrderAndSkuAccessories <- read.transactions("/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/idOrderAndSkuAccessories.csv",
format = 'single',
sep = ',',
header = TRUE,
cols= c('id_order', 'name_en'))
#write csv and create transactions file for accessories
write.csv(dfIdOrderAndSkuAccessories, "/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/dfIdOrderAndSkuAccessories.csv")
idOrderAndSkuAccessories <- read.transactions("/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/idOrderAndSkuAccessories.csv",
format = 'single',
sep = ',',
header = TRUE,
cols= c('id_order', 'name_en'))
#write csv and create transactions file for accessories
write.csv(dfIdOrderAndSkuAccessories, "/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/IdOrderAndSkuAccessories.csv")
idOrderAndSkuAccessories <- read.transactions("/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/IdOrderAndSkuAccessories.csv",
format = 'single',
sep = ',',
header = TRUE,
cols= c('id_order', 'name_en'))
rulesBrandFilt <- apriori (idOrderAndSkuBrandFilt, parameter = list(supp = 0.0004, conf = .005, minlen = 2))
for (s in 1:length(supportLevels)) {
# Apriori algorithm with a support level of 0.09%
for (i in 1:length(confidenceLevels)) {
rulesMat[s, i] <- length(apriori(idOrderAndSkuAccessories,
parameter = list(sup = supportLevels[s],
conf = confidenceLevels[i],
minlen = 2,
target = "rules")))
}
}
num_rules <- data.frame(rulesMat[1,],
rulesMat[2,],
rulesMat[3,],
rulesMat[4,],
confidenceLevels)
# Number of rules found with a support level of 0.09%, 0.07%, 0.05% and 0.03%
ggplot(data = num_rules, aes(x = confidenceLevels)) +
# Plot line and points (support level of 0.09%)
geom_line(aes(y = rulesMat[1,], colour = "Support level of 0.09%")) +
geom_point(aes(y = rulesMat[1,], colour = "Support level of 0.09%")) +
# Plot line and points (support level of 0.07%)
geom_line(aes(y = rulesMat[2,], colour = "Support level of 0.07%")) +
geom_point(aes(y = rulesMat[2,], colour = "Support level of 0.07%")) +
# Plot line and points (support level of 0.05%)
geom_line(aes(y = rulesMat[3,], colour = "Support level of 0.05%")) +
geom_point(aes(y = rulesMat[3,], colour = "Support level of 0.05%")) +
# Plot line and points (support level of 0.03%)
geom_line(aes(y = rulesMat[4,], colour = "Support level of 0.03%")) +
geom_point(aes(y = rulesMat[4,], colour = "Support level of 0.03%")) +
# Labs and theme
labs(x = "Confidence levels", y = "Number of rules found",
title = "Apriori algorithm with different support levels") +
theme_bw() +
theme(legend.title=element_blank())
#see which categories have the most values
arrange(groupByCat, count)
rulesBrandFilt <- apriori (idOrderAndSkuAccessories, parameter = list(supp = 0.0004, conf = .005, minlen = 2))
rulesAccessories <- apriori (idOrderAndSkuAccessories, parameter = list(supp = 0.0004, conf = .005, minlen = 2))
inspect(rulesAccessories)
rulesAccessories <- apriori (idOrderAndSkuAccessories, parameter = list(supp = 0.0004, conf = .005, minlen = 2))
inspect(rulesAccessories)
rulesAccessories <- apriori (idOrderAndSkuAccessories, parameter = list(supp = 0.0005, conf = .006, minlen = 2))
rulesAccessories <- apriori (idOrderAndSkuAccessories, parameter = list(supp = 0.0005, conf = .007, minlen = 2))
rulesAccessories <- apriori (idOrderAndSkuAccessories, parameter = list(supp = 0.0006, conf = .007, minlen = 2))
inspect(rulesAccessories)
rulesAccessories <- apriori (idOrderAndSkuAccessories, parameter = list(supp = 0.0006, conf = .7, minlen = 2))
rulesAccessories <- apriori (idOrderAndSkuAccessories, parameter = list(supp = 0.0003, conf = .7, minlen = 2))
rulesAccessories <- apriori (idOrderAndSkuAccessories, parameter = list(supp = 0.0003, conf = .5, minlen = 2))
for (s in 1:length(supportLevels)) {
# Apriori algorithm with a support level of 0.09%
for (i in 1:length(confidenceLevels)) {
rulesMat[s, i] <- length(apriori(idOrderAndSkuAccessories,
parameter = list(sup = supportLevels[s],
conf = confidenceLevels[i],
minlen = 2,
target = "rules")))
}
}
# Data frame
num_rules <- data.frame(rulesMat[1,],
rulesMat[2,],
rulesMat[3,],
rulesMat[4,],
confidenceLevels)
# Number of rules found with a support level of 0.09%, 0.07%, 0.05% and 0.03%
ggplot(data = num_rules, aes(x = confidenceLevels)) +
# Plot line and points (support level of 0.09%)
geom_line(aes(y = rulesMat[1,], colour = "Support level of 0.09%")) +
geom_point(aes(y = rulesMat[1,], colour = "Support level of 0.09%")) +
# Plot line and points (support level of 0.07%)
geom_line(aes(y = rulesMat[2,], colour = "Support level of 0.07%")) +
geom_point(aes(y = rulesMat[2,], colour = "Support level of 0.07%")) +
# Plot line and points (support level of 0.05%)
geom_line(aes(y = rulesMat[3,], colour = "Support level of 0.05%")) +
geom_point(aes(y = rulesMat[3,], colour = "Support level of 0.05%")) +
# Plot line and points (support level of 0.03%)
geom_line(aes(y = rulesMat[4,], colour = "Support level of 0.03%")) +
geom_point(aes(y = rulesMat[4,], colour = "Support level of 0.03%")) +
# Labs and theme
labs(x = "Confidence levels", y = "Number of rules found",
title = "Apriori algorithm with different support levels") +
theme_bw() +
theme(legend.title=element_blank())
rulesAccessories <- apriori (idOrderAndSkuAccessories, parameter = list(supp = 0.0003, conf = .05, minlen = 2))
rulesAccessories <- apriori (idOrderAndSkuAccessories, parameter = list(supp = 0.0005, conf = .05, minlen = 2))
inspect(rulesAccessories)
View(rulesAccessories)
inspect(rules)
#see which categories have the most values
arrange(groupByCat, count)
rulesSmartphone <- apriori (idOrderAndSkuSmartphone, parameter = list(supp = 0.0004, conf = .005, minlen = 2))
idOrderAndSkuSmartphone <- read.transactions("/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/IdOrderAndSkuSmartphone.csv",
format = 'single',
sep = ',',
header = TRUE,
cols= c('id_order', 'name_en'))
write.csv(dfIdOrderAndSkuSmartphone, "/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/IdOrderAndSkuSmartphone.csv")
dfIdOrderAndSkuSmartphone <- smartphone[c('id_order', 'sku', 'name_en')]
write.csv(dfIdOrderAndSkuSmartphone, "/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/IdOrderAndSkuSmartphone.csv")
idOrderAndSkuSmartphone <- read.transactions("/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/IdOrderAndSkuSmartphone.csv",
format = 'single',
sep = ',',
header = TRUE,
cols= c('id_order', 'name_en'))
#plot frequency and calculate apriori
itemFrequencyPlot(idOrderAndSkuSmartphone, top = 20, support = 0.005, cex.names = .7)
rulesSmartphone <- apriori (idOrderAndSkuSmartphone, parameter = list(supp = 0.0004, conf = .005, minlen = 2))
inspect(rulesBrandFilt)
#see which categories have the most values
arrange(groupByCat, count)
dfIdOrderAndSkuExtendedWarranty <- extended_warranty[c('id_order', 'sku', 'name_en')]
dfIdOrderAndSkuExtendedWarranty <- extended warranty[c('id_order', 'sku', 'name_en')]
View(`extended warranty`)
#see which categories have the most values
arrange(groupByCat, count)
View(`extended warranty`)
catNames <- groupByCat$manual_categories
catNames[6] <- "extendedWarranty"
#see which categories have the most values
arrange(groupByCat, count)
catNames <- groupByCat$manual_categories
catNames[6] <- "extendedWarranty"
catNames[6] <- "extendedWarranty"
catNames <- groupByCat$manual_categories
catNames[4] <- "extendedWarranty"
#create new dataframes for each of the categories
for (i in 1:length(catNames)) {
assign(catNames[i], itemOrders %>% filter(manual_categories == catNames[i]))
}
assign("extendedWarranty", itemOrders %>% filter(manual_categories == "extended warranty"))
#create df, csv & transactions file for SMARTPHONE
dfIdOrderAndSkuSmartphone <- smartphone[c('id_order', 'sku', 'name_en')]
write.csv(dfIdOrderAndSkuSmartphone, "/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/IdOrderAndSkuSmartphone.csv")
idOrderAndSkuSmartphone <- read.transactions("/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/IdOrderAndSkuSmartphone.csv",
format = 'single',
sep = ',',
header = TRUE,
cols= c('id_order', 'name_en'))
#plot frequency and calculate apriori
itemFrequencyPlot(idOrderAndSkuSmartphone, top = 20, support = 0.005, cex.names = .7)
rulesSmartphone <- apriori (idOrderAndSkuSmartphone, parameter = list(supp = 0.004, conf = .0005, minlen = 2))
inspect(rulesBrandFilt)
#create df, csv & transactions file for TABLET
dfIdOrderAndSkuTablet <- tablet[c('id_order', 'sku', 'name_en')]
write.csv(dfIdOrderAndSkuTablet, "/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/IdOrderAndSkuTablet.csv")
idOrderAndSkuTablet <- read.transactions("/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/IdOrderAndSkuTablet.csv",
format = 'single',
sep = ',',
header = TRUE,
cols= c('id_order', 'name_en'))
#plot frequency and calculate apriori
itemFrequencyPlot(idOrderAndSkuTablet, top = 20, support = 0.005, cex.names = .7)
rulesTablet <- apriori (idOrderAndSkuTablet, parameter = list(supp = 0.004, conf = .0005, minlen = 2))
inspect(rulesTablet)
#create df, csv & transactions file for DISPLAY
dfIdOrderAndSkuDisplay <- display[c('id_order', 'sku', 'name_en')]
write.csv(dfIdOrderAndSkuDisplay, "/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/IdOrderAndSkuDisplay.csv")
idOrderAndSkuDisplay <- read.transactions("/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/IdOrderAndSkuDisplay.csv",
format = 'single',
sep = ',',
header = TRUE,
cols= c('id_order', 'name_en'))
#plot frequency and calculate apriori
itemFrequencyPlot(idOrderAndSkuDisplay, top = 20, support = 0.005, cex.names = .7)
rulesDisplay <- apriori(idOrderAndSkuDisplay, parameter = list(supp = 0.004, conf = .0005, minlen = 2))
inspect(rulesDisplay)
#create df, csv & transactions file for LAPTOP
dfIdOrderAndSkuLaptop <- laptop[c('id_order', 'sku', 'name_en')]
write.csv(dfIdOrderAndSkuLaptop, "/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/IdOrderAndSkuLaptop.csv")
idOrderAndSkuLaptop <- read.transactions("/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/IdOrderAndSkuLaptop.csv",
format = 'single',
sep = ',',
header = TRUE,
cols= c('id_order', 'name_en'))
#plot frequency and calculate apriori
itemFrequencyPlot(idOrderAndSkuLaptop, top = 20, support = 0.005, cex.names = .7)
rulesLaptop <- apriori (idOrderAndSkuLaptop, parameter = list(supp = 0.004, conf = .0005, minlen = 2))
inspect(rulesLaptop)
#create df, csv & transactions file for OTHER
dfIdOrderAndSkuOther <- other[c('id_order', 'sku', 'name_en')]
write.csv(dfIdOrderAndSkuOther, "/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/IdOrderAndSkuOther.csv")
idOrderAndSkuOther <- read.transactions("/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/IdOrderAndSkuOther.csv",
format = 'single',
sep = ',',
header = TRUE,
cols= c('id_order', 'name_en'))
#plot frequency and calculate apriori
itemFrequencyPlot(idOrderAndSkuOther, top = 20, support = 0.005, cex.names = .7)
rulesOther <- apriori (idOrderAndSkuOther, parameter = list(supp = 0.004, conf = .0005, minlen = 2))
inspect(rulesOther)
#create df, csv & transactions file for PC
dfIdOrderAndSkuPC <- pc[c('id_order', 'sku', 'name_en')]
write.csv(dfIdOrderAndSkuPC, "/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/IdOrderAndSkuPC.csv")
idOrderAndSkuPC <- read.transactions("/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/IdOrderAndSkuPC.csv",
format = 'single',
sep = ',',
header = TRUE,
cols= c('id_order', 'name_en'))
#plot frequency and calculate apriori
itemFrequencyPlot(idOrderAndSkuPC, top = 20, support = 0.005, cex.names = .7)
rulesPC <- apriori (idOrderAndSkuPC, parameter = list(supp = 0.004, conf = .0005, minlen = 2))
inspect(rulesPC)
#create df, csv & transactions file for EXTENDED WARRANTY
dfIdOrderAndSkuExtendedWarranty <- extendedWarranty[c('id_order', 'sku', 'name_en')]
write.csv(dfIdOrderAndSkuExtendedWarranty, "/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/IdOrderAndSkuExtendedWarranty.csv")
idOrderAndSkuExtendedWarranty <- read.transactions("/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/IdOrderAndSkuExtendedWarranty.csv",
format = 'single',
sep = ',',
header = TRUE,
cols= c('id_order', 'name_en'))
#plot frequency and calculate apriori
itemFrequencyPlot(idOrderAndSkuExtendedWarranty, top = 20, support = 0.005, cex.names = .7)
rulesExtendedWarranty <- apriori (idOrderAndSkuExtendedWarranty, parameter = list(supp = 0.004, conf = .0005, minlen = 2))
inspect(rulesExtendedWarranty)
#create df, csv & transactions file for SMARTWHATCH
dfIdOrderAndSkuSmartWhatch <- smartwhatch[c('id_order', 'sku', 'name_en')]
write.csv(dfIdOrderAndSkuSmartWhatch, "/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/IdOrderAndSkuSmartWhatch.csv")
idOrderAndSkuSmartWhatch <- read.transactions("/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/IdOrderAndSkuSmartWhatch.csv",
format = 'single',
sep = ',',
header = TRUE,
cols= c('id_order', 'name_en'))
#plot frequency and calculate apriori
itemFrequencyPlot(idOrderAndSkuSmartWhatch, top = 20, support = 0.005, cex.names = .7)
rulesSmartWhatch <- apriori (idOrderAndSkuSmartWhatch, parameter = list(supp = 0.004, conf = .0005, minlen = 2))
inspect(rulesSmartWhatch)
#create df, csv & transactions file for SERVICE
dfIdOrderAndSkuService <- service[c('id_order', 'sku', 'name_en')]
write.csv(dfIdOrderAndSkuService, "/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/IdOrderAndSkuService.csv")
idOrderAndSkuService <- read.transactions("/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/IdOrderAndSkuService.csv",
format = 'single',
sep = ',',
header = TRUE,
cols= c('id_order', 'name_en'))
#plot frequency and calculate apriori
itemFrequencyPlot(idOrderAndSkuService, top = 20, support = 0.005, cex.names = .7)
rulesService <- apriori (idOrderAndSkuService, parameter = list(supp = 0.004, conf = .0005, minlen = 2))
inspect(rulesService)
#create df, csv & transactions file for CAMERA
dfIdOrderAndSkuCamera <- camera[c('id_order', 'sku', 'name_en')]
write.csv(dfIdOrderAndSkuCamera, "/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/IdOrderAndSkuService.csv")
idOrderAndSkuCamera <- read.transactions("/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/IdOrderAndSkuService.csv",
format = 'single',
sep = ',',
header = TRUE,
cols= c('id_order', 'name_en'))
#plot frequency and calculate apriori
itemFrequencyPlot(idOrderAndSkuCamera, top = 20, support = 0.005, cex.names = .7)
rulesCamera <- apriori (idOrderAndSkuCamera, parameter = list(supp = 0.004, conf = .0005, minlen = 2))
inspect(rulesCamera)
#create df, csv & transactions file for SOFTWARE
dfIdOrderAndSkuSoftware <- software[c('id_order', 'sku', 'name_en')]
write.csv(dfIdOrderAndSkuSoftware, "/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/IdOrderAndSkuSoftware.csv")
idOrderAndSkuSoftware <- read.transactions("/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/IdOrderAndSkuSoftware.csv",
format = 'single',
sep = ',',
header = TRUE,
cols= c('id_order', 'name_en'))
#plot frequency and calculate apriori
itemFrequencyPlot(idOrderAndSkuSoftware, top = 20, support = 0.005, cex.names = .7)
rulesSoftware <- apriori (idOrderAndSkuSoftware, parameter = list(supp = 0.004, conf = .0005, minlen = 2))
inspect(rulesSoftware)
#create df, csv & transactions file for PRINTER
dfIdOrderAndSkuPrinter <- printer[c('id_order', 'sku', 'name_en')]
write.csv(dfIdOrderAndSkuPrinter, "/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/IdOrderAndSkuPrinter.csv")
idOrderAndSkuPrinter <- read.transactions("/Users/owlthekasra/Documents/Code/RStudio/RecommenderSystem/categories/IdOrderAndSkuPrinter.csv",
format = 'single',
sep = ',',
header = TRUE,
cols= c('id_order', 'name_en'))
#plot frequency and calculate apriori
itemFrequencyPlot(idOrderAndSkuPrinter, top = 20, support = 0.005, cex.names = .7)
rulesPrinter <- apriori (idOrderAndSkuPrinter, parameter = list(supp = 0.004, conf = .0005, minlen = 2))
inspect(rulesPrinter)
print(rulesMat)
View(idOrderAndSkuService)
rulesMat[s, i] <- length(apriori(idOrderAndSkuOther,
parameter = list(sup = supportLevels[s],
conf = confidenceLevels[i],
minlen = 2,
target = "rules")))
rulesMat[s, i] <- length(apriori(idOrderAndSkuOther,
parameter = list(sup = supportLevels[s],
conf = confidenceLevels[i],
minlen = 2,
target = "rules")))
source('~/Documents/Code/RStudio/RecommenderSystem/DaniellesRulesMatrix.r', echo=TRUE)
