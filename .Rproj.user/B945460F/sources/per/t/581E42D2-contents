

# Support and confidence values
supportLevels <- c(0.0009, 0.0007, 0.0005, 0.0003)
confidenceLevels <- c(0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1)
# Empty integers 
# rules_sup.09 <- integer(length = length(confidenceLevels))
# rules_sup.07 <- integer(length = length(confidenceLevels))
# rules_sup.05 <- integer(length = length(confidenceLevels))
# rules_sup.03 <- integer(length = length(confidenceLevels))

# rules_sup <- c(rules_sup.09, rules_sup.07, rules_sup.05, rules_sup.03)

rulesMat <- matrix(nrow=length(supportLevels), ncol=length(confidenceLevels))

for (s in 1:length(supportLevels)) {
  # Apriori algorithm with a support level of 0.09%
  for (i in 1:length(confidenceLevels)) {
    rulesMat[s, i] <- length(apriori(idOrderAndSku,
                                    parameter = list(sup = supportLevels[s],
                                                     conf = confidenceLevels[i],
                                                     target = "rules")))
  }
}
print(rulesMat)

# # Apriori algorithm with a support level of 0.09%
#   for (i in 1:length(confidenceLevels)) {
# 
#     rules_sup.09[i] <- length(apriori(idOrderAndSku,
#                                      parameter = list(sup = supportLevels[1],
#                                      conf = confidenceLevels[i],
#                                      target = "rules")))
# 
#   }
# 
# # Apriori algorithm with a support level of 0.07%
# for (i in 1:length(confidenceLevels)) {
# 
#   rules_sup.07[i] <- length(apriori(idOrderAndSku,
#                                   parameter=list(sup = supportLevels[2],
#                                   conf = confidenceLevels[i],
#                                   target = "rules")))
# 
# }
# 
# # Apriori algorithm with a support level of 0.05%
# for (i in 1:length(confidenceLevels)) {
# 
#   rules_sup.05[i] <- length(apriori(idOrderAndSku,
#                                   parameter = list(sup = supportLevels[3],
#                                   conf = confidenceLevels[i],
#                                   target = "rules")))
# 
# }
# 
# # Apriori algorithm with a support level of 0.03%
# for (i in 1:length(confidenceLevels)) {
# 
#   rules_sup.03[i] <- length(apriori(idOrderAndSku,
#                                     parameter = list(sup = supportLevels[4],
#                                     conf = confidenceLevels[i],
#                                     target = "rules")))
# 
# }

# Data frame
num_rules <- data.frame(rulesMat[1,], 
                        rulesMat[2,], 
                        rulesMat[3,], 
                        rulesMat[4,], 
                        confidenceLevels)
# Number of rules found with a support level of 0.09%, 0.07%, 0.05% and 0.03%
ggplot(data = num_rules, aes(x = confidenceLevels)) +
  # Plot line and points (support level of 0.09%)
  geom_line(aes(y = rulesMat[1,], colour = "Support level of 0.09%")) + 
  geom_point(aes(y = rulesMat[1,], colour = "Support level of 0.09%")) +
  # Plot line and points (support level of 0.07%)
  geom_line(aes(y = rulesMat[2,], colour = "Support level of 0.07%")) +
  geom_point(aes(y = rulesMat[2,], colour = "Support level of 0.07%")) +
  # Plot line and points (support level of 0.05%)
  geom_line(aes(y = rulesMat[3,], colour = "Support level of 0.05%")) + 
  geom_point(aes(y = rulesMat[3,], colour = "Support level of 0.05%")) +
  # Plot line and points (support level of 0.03%)
  geom_line(aes(y = rulesMat[4,], colour = "Support level of 0.03%")) +
  geom_point(aes(y = rulesMat[4,], colour = "Support level of 0.03%")) +
  # Labs and theme
  labs(x = "Confidence levels", y = "Number of rules found", 
       title = "Apriori algorithm with different support levels") +
  theme_bw() +
  theme(legend.title=element_blank())